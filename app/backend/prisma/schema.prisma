// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users table
model User {
  id             String   @id @default(uuid()) @db.Uuid
  firebaseUid    String   @unique @map("firebase_uid")
  email          String   @unique
  displayName    String?  @map("display_name")
  timezone       String   @default("UTC")
  coachStyle     CoachStyle @default(SUPPORTIVE) @map("coach_style")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  
  // Relations
  habits         Habit[]
  habitEvents    HabitEvent[]
  journalEntries JournalEntry[]
  aiInsights     AIInsight[]
  dailyStats     DailyStats[]
  aiUsageStats   AIUsageStats[]
  aiUsageLogs    AIUsageLog[]
  weeklySummaries WeeklySummary[]

  @@map("users")
}

// Habits table
model Habit {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  title       String
  description String?
  habitType   HabitType @map("habit_type")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  habitEvents HabitEvent[]

  @@map("habits")
  @@index([userId])
}

// Habit Events table (completions, skips, relapses)
model HabitEvent {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  habitId    String    @map("habit_id") @db.Uuid
  eventType  EventType @map("event_type")
  notes      String?
  occurredAt DateTime  @map("occurred_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("habit_events")
  @@index([userId, habitId])
  @@index([occurredAt])
}

// Journal Entries table
model JournalEntry {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  title       String?
  content     String
  moodRating  Int?     @map("mood_rating")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
  @@index([userId])
  @@index([createdAt])
}

// AI Insights table
model AIInsight {
  id          String      @id @default(uuid()) @db.Uuid
  userId      String      @map("user_id") @db.Uuid
  insightType InsightType @map("insight_type")
  title       String
  content     String
  dataUsed    Json?       @map("data_used")
  wasShown    Boolean     @default(false) @map("was_shown")
  shownAt     DateTime?   @map("shown_at")
  createdAt   DateTime    @default(now()) @map("created_at")
  expiresAt   DateTime?   @map("expires_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_insights")
  @@index([userId])
  @@index([insightType])
  @@index([createdAt])
}

// Daily Stats table
model DailyStats {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  date             DateTime @db.Date
  habitsCompleted  Int      @default(0) @map("habits_completed")
  habitsTotal      Int      @default(0) @map("habits_total")
  journalEntries   Int      @default(0) @map("journal_entries")
  avgMood          Float?   @map("avg_mood")
  createdAt        DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("daily_stats")
  @@unique([userId, date], name: "user_date_unique")
  @@index([userId])
  @@index([date])
}

// AI Usage Stats table (monthly aggregates)
model AIUsageStats {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  month         String   // Format: YYYY-MM
  totalRequests Int      @default(0) @map("total_requests")
  totalTokens   Int      @default(0) @map("total_tokens")
  totalCost     Float    @default(0) @map("total_cost")
  lastUpdated   DateTime @default(now()) @map("last_updated")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage_stats")
  @@unique([userId, month], name: "user_month_unique")
  @@index([userId])
  @@index([month])
}

// AI Usage Logs table (detailed logs for recent activity)
model AIUsageLog {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  model            String
  promptTokens     Int      @map("prompt_tokens")
  completionTokens Int      @map("completion_tokens")
  totalTokens      Int      @map("total_tokens")
  cost             Float
  createdAt        DateTime @default(now()) @map("created_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_usage_logs")
  @@index([userId])
  @@index([createdAt])
}

// Weekly Summary table
model WeeklySummary {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  weekStart       String   @map("week_start") // Format: YYYY-MM-DD
  weekEnd         String   @map("week_end")   // Format: YYYY-MM-DD
  aiSummary       String   @map("ai_summary")
  statistics      Json     // WeeklyStatistics
  achievements    Json     // Achievement[]
  insights        Json     // WeeklyInsight[]
  recommendations Json     // Recommendation[]
  moodAnalysis    Json     @map("mood_analysis") // MoodAnalysis
  habitAnalysis   Json     @map("habit_analysis") // HabitAnalysis
  comparison      Json?    // WeeklyComparison (optional)
  predictions     Json?    // WeeklyPredictions (optional)
  createdAt       DateTime @default(now()) @map("created_at")
  expiresAt       DateTime @map("expires_at")
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("weekly_summaries")
  @@unique([userId, weekStart], name: "user_week_unique")
  @@index([userId])
  @@index([weekStart])
}

// Enums
enum CoachStyle {
  SUPPORTIVE   @map("supportive")
  DIRECT       @map("direct")
  MOTIVATIONAL @map("motivational")
}

enum HabitType {
  AVOID @map("avoid")
  BUILD @map("build")
}

enum EventType {
  COMPLETED @map("completed")
  SKIPPED   @map("skipped")
  RELAPSED  @map("relapsed")
}

enum InsightType {
  WEEKLY_SUMMARY   @map("weekly_summary")
  DAILY_TIP        @map("daily_tip")
  PATTERN_DETECTED @map("pattern_detected")
}